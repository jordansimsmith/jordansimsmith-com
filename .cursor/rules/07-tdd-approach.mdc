---
description: Guidelines for implementing new features using Test-Driven Development (TDD)
globs: **/*.java
---

# Test-driven development approach

When implementing new features, always follow the Test-Driven Development (TDD) approach. This ensures high-quality code with proper test coverage and allows for tight iteration cycles.

## Core principles

- Make minimal changes at each step to enable tight iteration on small code changes
- Write tests before implementation code
- Build incrementally, releasing small chunks of working, tested functionality
- Prioritize integration tests for the top-level interfaces, followed by unit tests for internals

## Implementation steps

Each iteration of implementing a feature should follow these specific steps in order:

1. **Stub out the implementation**: Create the minimal method/component/interface that will be called by consumers.

2. **Write integration tests**: Create tests for the top-level component (e.g., Lambda API handler, controller, etc.) that define the expected behavior.

3. **Ensure it builds**: Do the minimal necessary wiring such as creating or updating build targets (Bazel, etc.), dependency injection setup, etc.

4. **Implement the feature**: Write the minimal implementation needed to pass the integration tests.

5. **Write unit tests**: Create unit tests for the internal components of the implementation (e.g., other classes with functionality if introduced).

## Iteration guidelines

- Keep each iteration as minimal as possible in terms of code changes
- Complete one full cycle before starting the next feature iteration
- Each iteration should result in working, tested code
- Prefer multiple small PRs over a single large PR when possible
- Ensure both integration and unit tests are passing before considering an iteration complete

## Example usage

```java
// 1. Stub out the method (first iteration)
public Response processPayment(PaymentRequest request) {
    // will implement later
    throw new UnsupportedOperationException("Not yet implemented");
}

// 2. Write integration test
@Test
public void testProcessPayment_validRequest_returnsSuccess() {
    var request = new PaymentRequest("user123", 99.99);
    var controller = new PaymentController(mockPaymentService);
    
    var response = controller.processPayment(request);
    
    assertThat(response.isSuccess()).isTrue();
    assertThat(response.getTransactionId()).isNotNull();
}

// 3. Ensure it builds - Update BUILD.bazel file
// BUILD.bazel
java_library(
    name = "payment_controller",
    srcs = ["PaymentController.java"],
    deps = [
        ":payment_service",
        "//common:payment_models",
    ],
)

// 4. Implement the feature
public Response processPayment(PaymentRequest request) {
    try {
        return doProcessPayment(request);
    } catch (Exception e) {
        throw new RuntimeException("Failed to process payment for user " + request.getUserId(), e);
    }
}

private Response doProcessPayment(PaymentRequest request) throws Exception {
    // validate request
    if (request == null || request.getUserId() == null || request.getAmount() <= 0) {
        return Response.error("Invalid payment request");
    }
    
    // process the payment through the service
    var transactionId = paymentService.processPayment(
        request.getUserId(), 
        request.getAmount()
    );
    
    // return success response
    return Response.success(transactionId);
}

// 5. Write unit tests for internal components
@Test
public void testValidateRequest_nullRequest_returnsFalse() {
    var validator = new PaymentValidator();
    
    var result = validator.isValid(null);
    
    assertThat(result).isFalse();
}

@Test
public void testValidateRequest_validRequest_returnsTrue() {
    var validator = new PaymentValidator();
    var request = new PaymentRequest("user123", 99.99);
    
    var result = validator.isValid(request);
    
    assertThat(result).isTrue();
}

// 6. Ensure all tests pass with the build command
// bazel test --test_output=errors --verbose_failures //payment:all
```