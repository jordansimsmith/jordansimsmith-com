---
description: Guidelines for Java testing strategies and conventions
globs: **/*Test.java
alwaysApply: false
---

# Java testing guidelines

This rule outlines the testing strategy for Java code, defining three testing levels (unit, integration, and end-to-end), their naming conventions, and appropriate usage patterns.

## Test naming conventions

Our codebase follows these naming conventions to clearly indicate test types:

- **Unit tests**: Files ending with `Test.java` (e.g., `UserServiceTest.java`)
- **Integration tests**: Files ending with `IntegrationTest.java` (e.g., `UserServiceIntegrationTest.java`)
- **End-to-End tests**: Files ending with `E2ETest.java` (e.g., `UserServiceE2ETest.java`)

## Test structure

All tests should follow the Arrange-Act-Assert (AAA) pattern:

```java
@Test
void testMethod() {
    // arrange
    User user = new User("test@example.com");
    UserService service = new UserService(fakeRepository);
    
    // act
    boolean result = service.createUser(user);
    
    // assert
    assertThat(result).isTrue();
    assertThat(fakeRepository.findByEmail("test@example.com")).isNotNull();
}
```

- Use only these three comments (`// arrange`, `// act`, `// assert`) to organize your test
- Do not add additional comments unless strictly necessary
- The comments should always be lowercase
- Each section should have a clear purpose:
  - **arrange**: Set up the test data and preconditions
  - **act**: Perform the action being tested
  - **assert**: Verify the expected outcomes

## Testing levels

### Unit testing

Unit tests verify isolated components without external dependencies.

- Must not interact with any network dependencies (including local databases)
- Should use fakes over mocks when possible
- Should be fast and focused on testing a single component
- Focus on testing business logic and edge cases

Example:
```java
public class UserServiceTest {
    // Use a fake repository instead of mocking
    private UserRepository fakeRepository = new InMemoryUserRepository();
    private UserService service = new UserService(fakeRepository);
    
    @Test
    public void shouldCreateUser() {
        // arrange
        User user = new User("test@example.com");
        
        // act
        boolean created = service.create(user);
        
        // assert
        assertThat(created).isTrue();
    }
}
```

### Integration testing

Integration tests verify component interactions with local dependencies.

- Should use local dependencies (e.g., Testcontainers for Docker)
- Fall back to fakes when local dependencies are not available
- Test the integration between multiple components
- Focus on testing component boundaries and interactions

Example:
```java
public class UserServiceIntegrationTest {
    // Use testcontainers for DynamoDB
    @Container
    private static final DynamoDBContainer dynamoDb = new DynamoDBContainer();
    
    private UserRepository repository;
    private UserService service;
    
    @BeforeEach
    public void setup() {
        repository = new DynamoDbUserRepository(dynamoDb.getClient());
        service = new UserService(repository);
    }
    
    @Test
    public void shouldPersistUserToDatabase() {
        // arrange
        User user = new User("test@example.com");
        
        // act
        service.create(user);
        
        // assert
        assertThat(repository.findByEmail("test@example.com")).isNotNull();
    }
}
```

### End-to-End testing

E2E tests verify the full system behavior from an external perspective.

- Should build a local stack version of the complete system
- Must interact with the system as an external client would
- Test real user workflows and scenarios
- Focus on validating system-wide requirements

Example:
```java
public class UserManagementE2ETest {
    @Container
    private static final ApplicationContainer app = new ApplicationContainer();
    
    private ApiClient client;
    
    @BeforeEach
    public void setup() {
        client = new ApiClient(app.getBaseUrl());
    }
    
    @Test
    public void shouldCompleteUserRegistrationFlow() {
        // arrange
        UserRegistrationRequest request = new UserRegistrationRequest("test@example.com", "password123");
        
        // act
        UserRegistrationResponse response = client.registerUser(request);
        
        // assert
        assertThat(response.isSuccess()).isTrue();
        assertThat(client.login("test@example.com", "password123").isSuccessful()).isTrue();
    }
}
```

## Best practices

1. Prefer unit tests for most scenarios to keep the test suite fast
2. Use integration tests to verify boundary interactions
3. Keep E2E tests focused on critical user journeys
4. Avoid duplicating test coverage across levels
5. Maintain a testing pyramid: many unit tests, fewer integration tests, fewest E2E tests

## Assertion guidelines

Always use AssertJ assertions with static imports over JUnit or any other library's assertions.

### AssertJ best practices

- Import AssertJ assertions statically: `import static org.assertj.core.api.Assertions.assertThat;`
- Only use the `.as()` method when the assertion is not self-explanatory and needs clarification
- Take advantage of AssertJ's rich assertion methods for better readability

Example:
```java
// ✅ CORRECT: Using AssertJ assertions
import static org.assertj.core.api.Assertions.assertThat;

@Test
void shouldPerformCorrectCalculation() {
    // arrange
    Calculator calculator = new Calculator();
    
    // act
    int result = calculator.add(2, 3);
    
    // assert
    assertThat(result).isEqualTo(5);
}

// When the assertion needs clarification, use .as()
@Test
void shouldRejectInvalidInput() {
    // arrange
    InputValidator validator = new InputValidator();
    String complexInput = generateComplexInput();
    
    // act
    ValidationResult result = validator.validate(complexInput);
    
    // assert
    assertThat(result.isValid()).as("Complex input with special characters should be rejected").isFalse();
}

// ❌ INCORRECT: Using JUnit assertions
import static org.junit.jupiter.api.Assertions.assertEquals;

@Test
void shouldPerformCorrectCalculation() {
    Calculator calculator = new Calculator();
    int result = calculator.add(2, 3);
    
    assertEquals(5, result, "2 + 3 should equal 5");
}
```

### Benefits of AssertJ

- More readable and fluent API
- Better error messages with detailed explanations
- Rich assertion methods for collections, exceptions, dates, and more
- Better assertion composition
- Easier to extend with custom assertions 
