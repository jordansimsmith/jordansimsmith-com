---
description: Guidelines for maintaining consistency across services when implementing new features
globs: **/*.java
---

# Service consistency

When implementing new features, maintain consistency with existing patterns across services to ensure a cohesive codebase.

## Core principles

1. Always check other services (e.g., `price_tracker_api`, `immersion_tracker_api`) for corresponding boilerplate or similar functionality
2. Use existing implementations as examples and templates for new code
3. Follow the established style and structure precisely
4. Do not invent new patterns or approaches when existing ones can be adapted

## Why consistency matters

Consistency across services:
- Reduces cognitive load when switching between services
- Makes the codebase more predictable and easier to maintain
- Simplifies onboarding for new team members
- Ensures that best practices are uniformly applied

## Implementation guidelines

### Before starting implementation

1. Identify similar features in existing services
2. Analyze the structure, naming conventions, and patterns used
3. Note any service-specific adaptations of common patterns

### During implementation

1. Adapt existing patterns to your new feature without changing the fundamental approach
2. Use the same file organization and component breakdown
3. Maintain consistent naming conventions across similar components
4. Preserve method signatures and parameter ordering where applicable
5. Respect existing error handling and logging patterns

### Code review criteria

When reviewing new features, explicitly check for:
- Adherence to existing patterns from other services
- Justification for any deviations from established patterns
- Consistency in naming, structure, and approach

## Example workflow

1. Need to implement a new endpoint in Service A
2. Check how similar endpoints are implemented in Services B and C
3. Note the controller structure, service layer organization, data validation, error handling
4. Implement the new endpoint in Service A following the same patterns
5. During code review, compare with the reference implementations

Remember: Don't reinvent patterns - reuse them! 